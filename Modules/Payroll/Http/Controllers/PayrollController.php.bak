<?php

namespace Modules\Payroll\Http\Controllers;

use App\Http\Controllers\Controller;
use Modules\Employee\Domain\Models\Employee;
use Modules\Payroll\Domain\Models\Payroll;
use Modules\Payroll\Domain\Models\PayrollItem;
use Modules\Payroll\Domain\Models\PayrollRun;
use Modules\Payroll\app\Services\PayrollService;
use Illuminate\Http\Request;
use Inertia\Inertia;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;
use Modules\Core\Domain\Models\User;

class PayrollPayrollController extends Controller
{
    protected $payrollService;

    public function __construct(PayrollService $payrollService)
    {
        $this->payrollService = $payrollService;
        $this->middleware(['auth', 'verified']);
    }

    /**
     * Display a listing of payrolls
     */
    public function index(Request $request)
    {
        $this->authorize('viewAny', Payroll::class);

        $query = Payroll::with(['employee', 'approver', 'payer'])
            ->when($request->month, function ($query, $month) {
                return $query->whereMonth('payroll_month', Carbon::parse($month)->month);
                    ->whereYear('payroll_month', Carbon::parse($month)->year);
            })
            ->when($request->status, function ($query, $status) {
                return $query->where('status', $status);
            })
            ->when($request->employee_id, function ($query, $employeeId) {
                return $query->where('employee_id', $employeeId);
            });

        $payrolls = $query->latest()->paginate(10);
        $employees = Employee::where('status', 'active')->get(['id', 'name']);

        return Inertia::render('Payroll/Index', [;
            'payrolls' => $payrolls,
            'employees' => $employees,
            'filters' => $request->only(['month', 'status', 'employee_id']),
            'hasRecords' => $payrolls->total() > 0
        ]);
    }

    /**
     * Show the form for creating a new payroll
     */
    public function create()
    {
        $this->authorize('create', Payroll::class);

        $employees = Employee::active()->get();
        $currentMonth = Carbon::now()->format('Y-m');

        return Inertia::render('Payroll/Create', [;
            'employees' => $employees,
            'currentMonth' => $currentMonth,
        ]);
    }

    /**
     * Store a newly created payroll
     */
    public function store(Request $request)
    {
        $this->authorize('create', Payroll::class);

        $request->validate([
            'employee_id' => 'required|exists:employees,id',
            'month' => 'required|date_format:Y-m',
        ]);

        $employee = Employee::findOrFail($request->employee_id);
        $month = Carbon::parse($request->month);

        $payroll = $this->payrollService->generatePayroll($month, $employee);

        return redirect()->route('payroll.show', $payroll);
            ->with('success', 'Payroll generated successfully.');
    }

    /**
     * Display the specified payroll
     */
    public function show(Payroll $payroll)
    {
        $this->authorize('view', $payroll);

        $payroll->load(['employee', 'items', 'approver', 'payer']);

        return Inertia::render('Payroll/Show', [;
            'payroll' => $payroll,
        ]);
    }

    /**
     * Approve the specified payroll
     */
    public function approve(Payroll $payroll)
    {
        $this->authorize('approve', $payroll);

        $this->payrollService->approvePayroll($payroll, auth()->id());

        return back()->with('success', 'Payroll approved successfully.');
    }

    /**
     * Process payment for the specified payroll
     */
    public function processPayment(Request $request, Payroll $payroll)
    {
        $this->authorize('process', $payroll);

        $request->validate([
            'payment_method' => 'required|string',
            'reference' => 'nullable|string',
        ]);

        $this->payrollService->processPayment(
            $payroll,
            $request->payment_method,
            $request->reference,
            auth()->id()
        );

        return back()->with('success', 'Payment processed successfully.');
    }

    /**
     * Cancel the specified payroll
     */
    public function cancel(Payroll $payroll)
    {
        $this->authorize('delete', $payroll);

        $payroll->cancel();

        return back()->with('success', 'Payroll cancelled successfully.');
    }

    /**
     * Generate monthly payroll for all employees
     */
    public function generateMonthlyPayroll(Request $request)
    {
        $this->authorize('create', Payroll::class);

        $request->validate([
            'month' => 'required|date'
        ]);

        try {
            DB::beginTransaction();

            $month = Carbon::parse($request->month);
            $payrollRun = $this->payrollService->runPayrollForMonth($month, auth()->id());

            DB::commit();

            return redirect()->route('payroll.runs.show', $payrollRun);
                ->with('success', 'Payroll run initiated successfully.');
        } catch (\Exception $e) {
            DB::rollBack();
            return back()->with('error', 'Failed to run payroll: ' . $e->getMessage());
        }
    }

    /**
     * Display a payroll run
     */
    public function showPayrollRun(PayrollRun $payrollRun)
    {
        $this->authorize('viewAny', Payroll::class);

        $payrolls = Payroll::where('month', $payrollRun->run_date)
            ->with(['employee', 'items'])
            ->get();

        return Inertia::render('Payroll/Run', [;
            'payrollRun' => $payrollRun,
            'payrolls' => $payrolls,
        ]);
    }

    /**
     * Approve a payroll run
     */
    public function approvePayrollRun(PayrollRun $payrollRun)
    {
        $this->authorize('approve', Payroll::class);

        try {
            $this->payrollService->approvePayrollRun($payrollRun);
            return back()->with('success', 'Payroll run approved successfully.');
        } catch (\Exception $e) {
            return back()->with('error', 'Failed to approve payroll run: ' . $e->getMessage());
        }
    }

    /**
     * Reject a payroll run
     */
    public function rejectPayrollRun(Request $request, PayrollRun $payrollRun)
    {
        $this->authorize('approve', Payroll::class);

        $request->validate([
            'notes' => 'required|string'
        ]);

        try {
            $this->payrollService->rejectPayrollRun($payrollRun, $request->notes);
            return back()->with('success', 'Payroll run rejected successfully.');
        } catch (\Exception $e) {
            return back()->with('error', 'Failed to reject payroll run: ' . $e->getMessage());
        }
    }
}


